@startuml LAVACAR_ClassDiagram

title Lavacar - Diagrama de Classes

skinparam linetype ortho
skinparam classBackgroundColor<<abstract>> #F0E68C
skinparam classBackgroundColor<<entity>> #E1F5FE
skinparam classBackgroundColor<<service>> #FFF3E0
skinparam classAttributeIconSize 0
skinparam classBorderColor #333
skinparam classArrowColor #333

abstract class Pessoa {
    - id: string
    - nome: string
    - email: string
    - telefone: string
    - dataRegistro: Date
    --
    + getId(): string
    + getNome(): string
    + getEmail(): string
}

class Cliente {
    - cpf: string
    - endereco: string
    - cidade: string
    - agendamentos: Agendamento[]
    --
    + agendar(): void
    + cancelarAgendamento(): void
    + visualizarAgendamentos(): Agendamento[]
}

class Funcionario {
    - matricula: string
    - funcao: string
    - dataAdmissao: Date
    - agendamentosAssignados: Agendamento[]
    --
    + executarServico(): void
    + atualizarStatus(): void
    + listarAgendamentosHoje(): Agendamento[]
}

class Fornecedor {
    - cnpj: string
    - nomeEmpresa: string
    - contato: string
    - produtos: Produto[]
    - servicos: Servico[]
    --
    + cadastrarProduto(): void
    + listarProdutos(): Produto[]
    + associarServico(): void
}

class Produto {
    - id: string
    - nome: string
    - descricao: string
    - preco: number
    - estoque: number
    - fornecedor: Fornecedor
    --
    + aumentarEstoque(): void
    + diminuirEstoque(): void
    + getPreco(): number
}

class Servico {
    - id: string
    - nome: string
    - descricao: string
    - preco: number
    - duracao: number
    - produtos: Produto[]
    --
    + calcularDuracao(): number
    + getPreco(): number
    + associarProduto(): void
}

class ProdutoServico {
    - id: string
    - produto: Produto
    - servico: Servico
    - quantidade: number
    - dataAssociacao: Date
    --
    + getQuantidade(): number
    + atualizar(): void
}

class Agendamento {
    - id: string
    - cliente: Cliente
    - funcionario: Funcionario
    - servico: Servico
    - dataHora: Date
    - status: string
    - observacoes: string
    --
    + confirmar(): void
    + cancelar(): void
    + concluir(): void
    + atualizarStatus(): void
}

Pessoa <|-- Cliente
Pessoa <|-- Funcionario

Cliente "1" --> "*" Agendamento
Funcionario "1" --> "*" Agendamento
Agendamento "*" --> "1" Servico

Servico "1" --> "*" ProdutoServico
Produto "1" --> "*" ProdutoServico

Fornecedor "1" --> "*" Produto
Fornecedor "1" --> "*" Servico

@enduml
